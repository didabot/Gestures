<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace Gestures {" line1="    ////////////////////////paj7620//////////////////////" line2="    let gesture_first_init = true" line3="    const initRegisterArray: number[] = [" line4="        0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17," line5="        0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F," line6="        0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14," line7="        0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27," line8="        0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01," line9="        0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00," line10="        0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20," line11="        0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37," line12="        0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A," line13="        0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F," line14="        0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30," line15="        0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19," line16="        0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04," line17="        0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00," line18="        0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00," line19="        0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F," line20="        0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07," line21="        0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01," line22="        0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F," line23="        0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01," line24="        0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40," line25="        0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E," line26="        0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00," line27="        0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08," line28="        0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00," line29="        0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01," line30="        0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01," line31="        0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01" line32="    ];" line33="" line34="    /**" line35="    *  Gestures" line36="    */" line37="    export enum GestureType {" line38="        //% block=&quot;None&quot;" line39="        None = 0," line40="        //% block=&quot;Right&quot;" line41="        Right = 1," line42="        //% block=&quot;Left&quot;" line43="        Left = 2," line44="        //% block=&quot;Up&quot;" line45="        Up = 3," line46="        //% block=&quot;Down&quot;" line47="        Down = 4," line48="        //% block=&quot;Forward&quot;" line49="        Forward = 5," line50="        //% block=&quot;Backward&quot;" line51="        Backward = 6," line52="        //% block=&quot;Clockwise&quot;" line53="        Clockwise = 7," line54="        //% block=&quot;Anticlockwise&quot;" line55="        Anticlockwise = 8," line56="        //% block=&quot;Wave&quot;" line57="        Wave = 9" line58="    }" line59="" line60="    export class PAJ7620 {" line61="        private paj7620WriteReg(addr: number, cmd: number) {" line62="            let buf: Buffer = pins.createBuffer(2);" line63="            buf[0] = addr;" line64="            buf[1] = cmd;" line65="            pins.i2cWriteBuffer(0x73, buf, false);" line66="        }" line67="        private paj7620ReadReg(addr: number): number {" line68="            let buf2: Buffer = pins.createBuffer(1);" line69="            buf2[0] = addr;" line70="            pins.i2cWriteBuffer(0x73, buf2, false);" line71="            buf2 = pins.i2cReadBuffer(0x73, 1, false);" line72="            return buf2[0];" line73="        }" line74="        private paj7620SelectBank(bank: number) {" line75="            if (bank == 0) this.paj7620WriteReg(0xEF, 0);" line76="            else if (bank == 1) this.paj7620WriteReg(0xEF, 1);" line77="        }" line78="        private paj7620Init() {" line79="            let temp = 0;" line80="            this.paj7620SelectBank(0);" line81="            temp = this.paj7620ReadReg(0);" line82="            if (temp == 0x20) {" line83="                for (let i = 0; i &lt; 438; i += 2) {" line84="                    this.paj7620WriteReg(initRegisterArray[i], initRegisterArray[i + 1]);" line85="                }" line86="            }" line87="            this.paj7620SelectBank(0);" line88="        }" line89="        init() {" line90="            this.paj7620Init();" line91="            basic.pause(200);" line92="        }" line93="        read(): number {" line94="            let data = 0, result = 0;" line95="            data = this.paj7620ReadReg(0x43);" line96="            switch (data) {" line97="                case 0x01:" line98="                    result = GestureType.Right;" line99="                    break;" line100="                case 0x02:" line101="                    result = GestureType.Left;" line102="                    break;" line103="                case 0x04:" line104="                    result = GestureType.Up;" line105="                    break;" line106="                case 0x08:" line107="                    result = GestureType.Down;" line108="                    break;" line109="                case 0x10:" line110="                    result = GestureType.Forward;" line111="                    break;" line112="                case 0x20:" line113="                    result = GestureType.Backward;" line114="                    break;" line115="                case 0x40:" line116="                    result = GestureType.Clockwise;" line117="                    break;" line118="                case 0x80:" line119="                    result = GestureType.Anticlockwise;" line120="                    break;" line121="                default:" line122="                    data = this.paj7620ReadReg(0x44);" line123="                    if (data == 0x01)" line124="                        result = GestureType.Wave;" line125="                    break;" line126="            }" line127="            return result;" line128="        }" line129="    }" line130="    const gestureEventId = 3100;" line131="    let lastGesture = GestureType.None;" line132="    let paj7620 = new PAJ7620();" line133="    /**" line134="        * Do something when a gesture is detected" line135="        * @param gesture type of gesture to detect" line136="        * @param handler code to run" line137="    */" line138="    //% blockId= gesture_create_event block=&quot;Gesture sensor IIC port is %gesture&quot;" line139="    //% gesture.fieldEditor=&quot;gridpicker&quot; gesture.fieldOptions.columns=3" line140="    //% subcategory=Sensor group=&quot;IIC Port&quot;" line141="    export function onGesture(gesture: GestureType, handler: () =&gt; void) {" line142="        control.onEvent(gestureEventId, gesture, handler);" line143="        if(gesture_first_init){" line144="            paj7620.init();" line145="            gesture_first_init = false" line146="        }" line147="        control.inBackground(() =&gt; {" line148="            while (true) {" line149="                const gesture = paj7620.read();" line150="                if (gesture != lastGesture) {" line151="                    lastGesture = gesture;" line152="                    control.raiseEvent(gestureEventId, lastGesture);" line153="                }" line154="                basic.pause(100);" line155="            }" line156="        })" line157="    }" line158="" line159="" line160="}" numlines="161"></mutation></block></statement></block><block type="Gestures_onGesture" x="1020" y="194"><field name="gesture">Gestures.GestureType.None</field></block></xml>